package main

import (
 "fmt"
 "math"
)

// Function to perform Gaussian elimination
func gaussianElimination(A [][]float64, b []float64) []float64 {
 n := len(b)

    // Augment matrix A with vector b.
 for i := 0; i < n; i++ {
  A[i] = append(A[i], b[i])
 }
    
 // Forward elimination
 for i := 0; i < n; i++ {
        // Partial pivoting
        pivotRow := i
  for k := i + 1; k < n; k++{
           if math.Abs(A[k][i]) > math.Abs(A[pivotRow][i]){
       pivotRow = k
     }
  }

        if pivotRow != i {
            A[i], A[pivotRow] = A[pivotRow], A[i]
        }

  if math.Abs(A[i][i]) < 1e-10 { // Check for singularity
   return []float64{}
  }
  for j := i + 1; j < n; j++ {
   factor := A[j][i] / A[i][i]
   for k := i; k <= n; k++ {
    A[j][k] -= factor * A[i][k]
   }
  }
 }
 // Back substitution
 x := make([]float64, n)
 for i := n - 1; i >= 0; i-- {
  x[i] = A[i][n]
  for j := i + 1; j < n; j++ {
   x[i] -= A[i][j] * x[j]
  }
  x[i] /= A[i][i]
 }
 return x
}


func main() {
    // Example system of equations
    A := [][]float64{
        {2, 1, -1},
        {-3, -1, 2},
        {-2, 1, 2},
    }
    b := []float64{8, -11, -3}
 x := gaussianElimination(A,b)
 if len(x) > 0 {
  fmt.Println("Solution:")
  for i, val := range x {
    fmt.Printf("x%d = %.2f\n",i+1,val)
  }
 } else {
  fmt.Println("No unique solution exists.")
 }
}
